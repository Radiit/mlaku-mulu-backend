name: Deploy Docker App to VPS

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:

env:
  CONTAINER_NAME: mlaku-mulu-backend
  IMAGE_NAME: mlaku-mulu-backend

jobs:
  build-and-deploy:
    name: Build & Deploy Docker Image to VPS
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker image
        run: docker save ${{ env.IMAGE_NAME }}:latest | gzip > image.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar.gz

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-and-deploy
    permissions:
      contents: read

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Install SSH client
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client

      - name: Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS using password
        run: |
          # Install sshpass for password authentication
          sudo apt-get install -y sshpass
          
          # Copy Docker image to VPS using password
          sshpass -p '${{ secrets.VPS_PASSWORD }}' scp -o StrictHostKeyChecking=no image.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_PATH }}/
          
          # Deploy on VPS using password
          sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd ${{ secrets.VPS_PATH }}
            
            # Load Docker image
            docker load < image.tar.gz
            
            # Stop and remove existing container
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
            
            # Remove old image
            docker rmi ${{ env.IMAGE_NAME }}:latest || true
            
            # Run new container
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart unless-stopped \
              -p 8086:8086 \
              -e NODE_ENV=production \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e JWT_REFRESH_SECRET="${{ secrets.JWT_REFRESH_SECRET }}" \
              -e SMTP_HOST="${{ secrets.SMTP_HOST }}" \
              -e SMTP_PORT="${{ secrets.SMTP_PORT }}" \
              -e SMTP_USER="${{ secrets.SMTP_USER }}" \
              -e SMTP_PASS="${{ secrets.SMTP_PASS }}" \
              -e SMTP_FROM="${{ secrets.SMTP_FROM }}" \
              ${{ env.IMAGE_NAME }}:latest
            
            # Clean up
            rm -f image.tar.gz
            
            # Wait for container to start
            sleep 10
            
            # Health check
            if curl -f http://localhost:8086/health; then
              echo "✅ Deployment successful! Container is healthy."
            else
              echo "❌ Health check failed. Container may still be starting."
              docker logs ${{ env.CONTAINER_NAME }} --tail 20
            fi
          EOF

      - name: Verify deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          if curl -f http://${{ secrets.VPS_HOST }}:8086/health; then
            echo "✅ VPS deployment verified successfully!"
          else
            echo "❌ VPS deployment verification failed"
            exit 1
          fi