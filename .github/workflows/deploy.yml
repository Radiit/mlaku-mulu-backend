name: Deploy Docker App to VPS

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:

env:
  CONTAINER_NAME: mlaku-mulu-backend
  IMAGE_NAME: mlaku-mulu-backend

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH client
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client

      - name: Validate VPS secrets
        run: |
          if [ -z "${{ secrets.VPS_HOST }}" ]; then
            echo "‚ùå Error: VPS_HOST secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VPS_USER }}" ]; then
            echo "‚ùå Error: VPS_USER secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VPS_PASSWORD }}" ]; then
            echo "‚ùå Error: VPS_PASSWORD secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VPS_PATH }}" ]; then
            echo "‚ùå Error: VPS_PATH secret is not set"
            exit 1
          fi
          echo "‚úÖ All VPS secrets are configured"
          echo "Host: ${{ secrets.VPS_HOST }}"
          echo "User: ${{ secrets.VPS_USER }}"
          echo "Path: ${{ secrets.VPS_PATH }}"

      - name: Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "Adding ${{ secrets.VPS_HOST }} to known hosts..."
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts || {
            echo "‚ùå Failed to add VPS to known hosts"
            exit 1
          }
          echo "‚úÖ VPS added to known hosts successfully"

      - name: Deploy to VPS using password
        run: |
          # Install sshpass for password authentication
          sudo apt-get install -y sshpass
          
          echo "üöÄ Starting deployment to VPS..."
          echo "Host: ${{ secrets.VPS_HOST }}"
          echo "User: ${{ secrets.VPS_USER }}"
          echo "Path: ${{ secrets.VPS_PATH }}"
          
          # Deploy on VPS using password
          echo "üê≥ Deploying container on VPS..."
          sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd ${{ secrets.VPS_PATH }}
            
            echo "üìÅ Working directory: $(pwd)"
            
            # Clean up existing container and image
            echo "üßπ Cleaning up existing resources..."
            docker stop ${{ env.CONTAINER_NAME }} || echo "No existing container to stop"
            docker rm ${{ env.CONTAINER_NAME }} || echo "No existing container to remove"
            docker rmi ${{ env.IMAGE_NAME }}:latest || echo "No existing image to remove"
            
            # Remove existing repository if exists
            if [ -d "mlaku-mulu-backend" ]; then
              echo "üóëÔ∏è Removing existing repository..."
              rm -rf mlaku-mulu-backend
            fi
            
            # Clone fresh repository
            echo "üì• Cloning fresh repository..."
            git clone https://github.com/Radiit/mlaku-mulu-backend.git
            cd mlaku-mulu-backend
            
            echo "üìã Repository cloned successfully"
            echo "üìÅ Current directory: $(pwd)"
            echo "üìã Files in repository:"
            ls -la
            
            # Build Docker image on VPS
            echo "üî® Building Docker image on VPS..."
            if docker build --no-cache --force-rm -t ${{ env.IMAGE_NAME }}:latest .; then
              echo "‚úÖ Docker image built successfully on VPS"
            else
              echo "‚ùå Failed to build Docker image on VPS"
              exit 1
            fi
            
            # Verify image was built
            if ! docker images | grep -q "${{ env.IMAGE_NAME }}"; then
              echo "‚ùå Error: Image not found after building"
              docker images
              exit 1
            fi
            
            echo "üöÄ Starting new container..."
            # Run new container
            CONTAINER_ID=$(docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart unless-stopped \
              -p 8086:8086 \
              -e NODE_ENV=production \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e JWT_REFRESH_SECRET="${{ secrets.JWT_REFRESH_SECRET }}" \
              -e SMTP_HOST="${{ secrets.SMTP_HOST }}" \
              -e SMTP_PORT="${{ secrets.SMTP_PORT }}" \
              -e SMTP_USER="${{ secrets.SMTP_USER }}" \
              -e SMTP_PASS="${{ secrets.SMTP_PASS }}" \
              -e SMTP_FROM="${{ secrets.SMTP_FROM }}" \
              ${{ env.IMAGE_NAME }}:latest)
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Container started successfully with ID: $CONTAINER_ID"
            else
              echo "‚ùå Failed to start container"
              exit 1
            fi
            
            echo "‚è≥ Waiting for container to start..."
            # Wait for container to start
            sleep 15
            
            echo "üè• Running health check..."
            # Health check with retries
            for i in {1..5}; do
              echo "Health check attempt $i/5..."
              if curl -f http://localhost:8086/health; then
                echo "‚úÖ Health check passed!"
                break
              else
                echo "‚è≥ Health check attempt $i failed, waiting..."
                sleep 5
              fi
            done
            
            # Final health check
            if curl -f http://localhost:8086/health; then
              echo "‚úÖ Deployment successful! Container is healthy."
            else
              echo "‚ùå Health check failed after all attempts."
              echo "üìã Container logs:"
              docker logs ${{ env.CONTAINER_NAME }} --tail 30
              echo "üìä Container status:"
              docker ps -a
              exit 1
            fi
            
            # Clean up repository (optional - keep for debugging)
            echo "üßπ Cleaning up repository..."
            cd ..
            rm -rf mlaku-mulu-backend
            echo "‚úÖ Repository cleanup completed"
          EOF

      - name: Verify deployment
        run: |
          echo "‚è≥ Waiting for deployment to be ready..."
          sleep 30
          echo "üîç Verifying deployment at http://${{ secrets.VPS_HOST }}:8086/health"
          if curl -f http://${{ secrets.VPS_HOST }}:8086/health; then
            echo "‚úÖ VPS deployment verified successfully!"
          else
            echo "‚ùå VPS deployment verification failed"
            exit 1
          fi