// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id         String  @id @default(uuid())
  email      String  @unique
  password   String
  role       String  // "owner" | "pegawai" | "turis"
  isVerified Boolean @default(false)
  phone      String  @unique
  verificationToken String?
  tokenExpiry       DateTime?
  refreshToken      String?  @unique
  refreshTokenExpiry DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  trips      Trip[]  @relation("TurisTrips") // Turis memiliki banyak perjalanan
  bookings   Booking[] // User bisa punya banyak booking
  createdTrips Trip[] @relation("OwnerTrips") // Owner yang buat trip
}

model Trip {
  id          String   @id @default(uuid())
  title       String   // Judul trip
  description String   // Deskripsi trip
  destination Json     // Destinasi dengan detail
  startDate   DateTime // Tanggal mulai trip
  endDate     DateTime // Tanggal selesai trip
  maxCapacity Int      // Kapasitas maksimal
  currentBookings Int  @default(0) // Jumlah booking saat ini
  price       Decimal  @db.Decimal(10, 2) // Harga per orang
  status      String   @default("active") // "active", "inactive", "cancelled"
  
  // Relations
  turisId     String?  // Optional: untuk trip yang sudah dibooking
  turis       User?    @relation("TurisTrips", fields: [turisId], references: [id], onDelete: SetNull)
  ownerId     String   // Owner yang buat trip
  owner       User     @relation("OwnerTrips", fields: [ownerId], references: [id], onDelete: Cascade)
  bookings    Booking[] // Trip bisa punya banyak booking
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Booking {
  id        String   @id @default(uuid())
  tripId    String
  userId    String
  status    String   @default("pending") // "pending", "confirmed", "cancelled", "completed"
  notes     String?  // Catatan tambahan
  
  // Relations
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([tripId, userId]) // Satu user hanya bisa booking satu trip sekali
}
